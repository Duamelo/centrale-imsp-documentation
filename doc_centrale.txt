Mise en situation :

	le but principal du projet est de créer une application qui permet de :
-	consulter des informations sur les capteurs ;
-	accéder aux mesures de sorties de chaque capteurs
- 	pouvoir effectuer des opérations statistiques sur les données recueillis

Étant donnée que les données brutes recueillies depuis la centrale sont dans un format hexadécimal, donc incompréhensible pour être exploiter directement, nous avons du écrire un programme dont le but est de transformer ces données hexadécimales en données ASCII.

Présentation du programme de décodage :

Ce programme continent principalement deux modules : les modules de parsage et de décodage.

*	Module de parsage :
	
	Après analyse des fichiers brutes, ( vérification des répétitions, régularité, entêtes) qui contient entre autres :
	- entêtes ( description de la table, heure d’enregistrement, information sur les colonnes ) ;
            - données brute mesurées; 
nous avons écrit un sous-module parse.c qui, détecte l’entête, récupère les informations utiles au décodage c’est-à-dire :
- la description de la table (nom, date d’enregistrement, fréquence)
- description d’une ligne d’enregistrement ( nombre de colonne, type de chaque donnée par colonne, unités)


Avec ces informations nous savons que les données sont enregistrées à partir d’une date t, avec une fréquence f, qu’un enregistrement contient c colonnes, chaque colonne étant de type c_type donc occupant c_taille octet.
Toujours avec ces informations, nous connaissons l’ id de la station, la taille totale d’un enregistrement et le nombre d’octet occupé par une colonne de l’enregistrement ; ce qui nous permet de récupérer )à chaque fois un enregistrement brute et de le décoder en conséquence.

Dans la partie description de la table, nous prenons la date et la fréquence d’enregistrement. Avec la fonction arrondi_date on arrondit la date dans le but d’avoir des temps d’enregistrement cohérent.

En utilisant la fréquence d’enregistrement,  on incrémente le timestamp pour chaque enregistrement en utilisant la fonction increment_date.


 La fonction parsevalue prend le retour de la fonction parseheader qui est un tableau de structure

Elle nous renvoie une succession de fichier.
Chaque fichier représentant une colonne chacune contenant la date, la donnée décodée et l’ id de cette colonne.

** Module de décodage

On appelle decode sur la chaine de caractère que parsevalue à couper et cette chaine correspond à une colonne .







	

